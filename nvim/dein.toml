[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
build = 'install.cmd nightly'
hook_add ='''
  set nobackup
  set nowritebackup
  set cmdheight=2
  set updatetime=300
  set shortmess+=c
  set signcolumn=yes
  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> for trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
  " Coc only does snippet and additional edit on confirm.
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " Use `[c` and `]c` for navigate diagnostics
  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  vmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  vmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Use `:Format` for format current buffer
  command! -nargs=0 Format :call CocAction('format')

  " Use `:Fold` for fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Using CocList
  " Show all diagnostics
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'mgee/lightline-bufferline'
hook_add = '''
  let g:lightline#bufferline#show_number  = 1
  let g:lightline#bufferline#shorten_path = 1
  let g:lightline#bufferline#unnamed      = '[No Name]'
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = '''
  let g:lightline#ale#indicator_checking = "\uf110"
  let g:lightline#ale#indicator_warnings = "\uf071"
  let g:lightline#ale#indicator_errors = "\uf05e"
  let g:lightline#ale#indicator_ok = "\uf00c"
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \'colorscheme' : 'iceberg',
    \'active': {
    \  'left': [ [ 'mode', 'paste' ],
    \            [ 'cocstatus', 'fugitive', 'readonly', 'filename', 'modified' ] ],
    \  'right': [
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
    \             [ 'lineinfo', 'percent' ],
    \             [ 'fileformat', 'fileencoding', 'filetype' ]
    \           ]
    \},
    \'component_function' : {
    \  'cocstatus': 'coc#status',
    \  'fugitive' : 'LightLineFugitive',
    \  'filetype' : 'LightLineFiletype',
    \  'fileformat' : 'LightLineFileformat'
    \},
    \'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \'tabline' : {'left': [['buffers']], 'right': [['close']]},
    \'component_expand' : {
    \  'buffers': 'lightline#bufferline#buffers',
    \  'linter_checking': 'lightline#ale#checking',
    \  'linter_warnings': 'lightline#ale#warnings',
    \  'linter_errors': 'lightline#ale#errors',
    \  'linter_ok': 'lightline#ale#ok'
    \},
    \'component_type' : {
    \  'buffers': 'tabsel',
    \  'linter_checking': 'left',
    \  'linter_warnings': 'warning',
    \  'linter_errors': 'error',
    \  'linter_ok': 'left'
    \}
  \}

  function! LightLineFugitive()
    if exists("*fugitive#head")
      let _ = fugitive#head()
      return strlen(_) ? ''._ : ''
    endif
    return ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  let NERDTreeChDirMode = 2
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'
  let g:DevIconsEnableFoldersOpenClose = 1
  let g:webdevicons_conceal_nerdtree_brackets = 1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_linters = {
    \ 'javascript': ['eslint']
    \ }
  let g:ale_fixers = {
    \ 'javascript': ['eslint']
    \ }
  let g:ale_lint_on_text_changed = 1
  let g:ale_lint_on_save = 1
  let g:ale_fix_on_save = 1
  let g:ale_lint_delay = 500
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

#[[plugins]]
#repo = 'honza/vim-snippets'

#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'

#[[plugins]]
#repo = 'Shougo/neosnippet.vim'
#hook_add = '''
#  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#  xmap <C-k>     <Plug>(neosnippet_expand_target)

#  imap <expr><TAB>
#  \ pumvisible() ? "\<C-n>" :
#  \ neosnippet#expandable_or_jumpable() ?
#  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

#  if has('conceal')
#    set conceallevel=3 concealcursor=niv
#  endif
#  let g:neosnippet#enable_snipmate_compatibility = 1
#'''

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  let g:deoplete#enable_at_startup = 1
#  let g:deoplete#file#enable_buffer_path = 1
#'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'cespare/vim-toml'
